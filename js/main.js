/*
Задание считается выполненным, если в проекте описаны следующие функции:

/*
Задание считается выполненным, если в проекте описаны следующие функции:

/*
Задание считается выполненным, если в проекте описаны следующие функции:

Функция, возвращающая случайное целое число из переданного диапазона включительно. Пример использования функции:

имя_функции(от, до); // Результат: целое число из диапазона "от...до"
Учтите, что аргументами функции могут быть только положительные числа и ноль. Если функции пришли неправильные аргументы, она должна вернуть NaN (о том, что это такое, говорилось в учебнике).

Придумайте, как функция будет вести себя, если передать значение «до» меньшее, чем значение «от», или равное ему. Например, в этом случае функция также может возвращать NaN. Или же вы можете проверить, какой из аргументов больше, а какой меньше, и при необходимости поменять их местами. Возможны и другие варианты.

Функция может не гарантировать верный результат, если в переданном диапазоне нет ни одного подходящего числа.
=============================================================================================
*/
// Функция, возвращающая случайное целое число из переданного диапазона включительно от и до
// Примечание:
// функция возращает NaN, если хотя бы один из аргументов меньше ноля;
// функция возращает NaN, если хотя бы один из аргументов не является числом;
// функция учитывает возможную передачу аргументов в убывающем порядке;
// функция возращает undefined, если в диапазоне отсутствуют целочисленные значения.

function getRandomIntNumber(minNumber, maxNumber) {
  if (minNumber < 0 || maxNumber < 0 || typeof minNumber !== 'number' || typeof maxNumber !== 'number') {
    return NaN;
  }
  // Ротация аргументов в параметрах функции
  if (minNumber > maxNumber) {
    const transitIntNumber = minNumber;
    minNumber = maxNumber;
    maxNumber = transitIntNumber;
  }
  //console.log('minNumber ' + minNumber);
  //console.log('maxNumber ' + maxNumber);

  // Нахождение случайного числа с плавающей точкой из диапазона
  const randomNumber = minNumber + Math.random() * (maxNumber - minNumber);
  //console.log('randomNumber ' + randomNumber);

  // Округление случайного числа к ближайшему целому, чтобы не нарушить закон случайности
  const roundedNumber = Math.round(randomNumber);
  if (minNumber <= roundedNumber && roundedNumber <= maxNumber) {
    //console.log('Answer if - roundedNumber ' + roundedNumber);
    return (roundedNumber);
  }
  // Похоже, что ширина диапазона меньше единицы
  // Проверка округленного вверх на присутствие в диапазоне
  const roundedCeilNumber = Math.ceil(randomNumber);
  if (minNumber <= roundedCeilNumber && roundedCeilNumber <= maxNumber) {
    //console.log('Answer if - roundedCeilNumber ' + roundedCeilNumber);
    return roundedCeilNumber;
  }
  // Проверка округленного вниз на присутствие в диапазоне
  const roundedFloorNumber = Math.floor(randomNumber);
  if (minNumber <= roundedFloorNumber && roundedFloorNumber <= maxNumber) {
    //console.log('Answer if - roundedFloorNumber ' + roundedFloorNumber);
    return roundedFloorNumber;
  }
  // Ближайшие целые числа отсутствуют в диапазоне
  // return не пишу, по умолчанию функция вернет undefined
}
getRandomIntNumber(0.99, 1.01);
//===========================================================================================
/*
Функция, возвращающая случайное число с плавающей точкой из переданного диапазона включительно. Будет использоваться для генерации временных географических координат в следующем задании. Пример использования функции:

имя_функции(от, до, количество_знаков_после_запятой); // Результат: число с плавающей точкой из диапазона "от...до" с указанным "количеством знаков после запятой"
Учтите, что аргументами функции могут быть только положительные числа и ноль. Если функции пришли неправильные аргументы, она должна вернуть NaN. Не забудьте, что в случае с дробными числами диапазон может быть в десятых, сотых, тысячных и т. д. долях. Например, 1.1, 1.2 — корректный диапазон.

Придумайте, как функция будет вести себя, если передать значение «до» меньшее, чем значение «от», или равное ему. В этом случае вы можете вернуть NaN, поменять аргументы местами или выбрать другой вариант.

Функция может не гарантировать верный результат, если в переданном диапазоне нет ни одного подходящего числа.

Чтобы ESLint не ругался на неиспользуемые функции, временно вызовите их по одному разу после объявления.
=============================================================================================
*/
// Функция, возвращающая случайное число с плавающей точкой из переданного диапазона включительно
// Примечание:
// функция возращает NaN, если хотя бы один из аргументов меньше ноля;
// функция возращает NaN, если хотя бы один из аргументов не является числом;
// функция возращает NaN, если аргумент количества знаков после точки не является натуральным числом;
// функция учитывает возможную передачу аргументов в убывающем порядке;
// функция возращает undefined, если в диапазоне отсутствуют подходящие значения.

function getRandomFloatNumber(minNumber, maxNumber, digits) {
  if (minNumber < 0 || maxNumber < 0 || typeof minNumber !== 'number' || typeof maxNumber !== 'number' || !Number.isInteger(digits) || digits < 0 || digits > 20) {
    return NaN;
  }
  // Ротация аргументов в параметрах функции
  if (minNumber > maxNumber) {
    const transitIntNumber = minNumber;
    minNumber = maxNumber;
    maxNumber = transitIntNumber;
  }
  //console.log('minNumber ' + minNumber);
  //console.log('maxNumber ' + maxNumber);

  // Нахождение случайного числа с плавающей точкой из диапазона
  const randomFloatNumber = minNumber + Math.random() * (maxNumber - minNumber);
  //console.log('randomFloatNumber ' + randomFloatNumber);
  //console.log(randomFloatNumber);
  //console.log(Number(randomFloatNumber.toFixed(digits)));
  // return не пишу, по умолчанию функция вернет undefined
  return Number(randomFloatNumber.toFixed(digits));
}
getRandomFloatNumber(2.5, 4.8, 7);
